geom_vline(data = TVlines, aes(xintercept=as.numeric(date[c(1,2,3,4)])), linetype=4) +
geom_text(mapping = aes(x = date,
y = 4,
label = RefTV,
hjust = "center",
vjust = 0),
data = TVlines) +
scale_fill_manual(values = c("#ff007b","#ff6e00","#00d9ff"))+
labs(title = "National cable news networks",
x = NULL,
y = "Share of sentences",
caption = "Includes Bloomberg, CNBC, CNN, Fox Business, Fox News and MSNBC.") +
theme_minimal() +
geom_text(data=d, mapping=aes(x=date, y=percent, label=name))
TVplot
d <- data.frame(state = c("florida", "texas", "puerto_rico"),
date=as.Date(c("2017-09-01","2017-09-10","2017-09-28")),
percent=c(1,1,1),
name = c("Texas", "Florida", "Puerto Rico"),
stringsAsFactors = FALSE)
View(d)
d <- data.frame(state = c("texas", "florida", "puerto_rico"),
date=as.Date(c("2017-09-01","2017-09-10","2017-09-28")),
percent=c(1,1,1),
name = c("Texas", "Florida", "Puerto Rico"),
stringsAsFactors = FALSE)
View(d)
TVplot <- tv_states_longer %>%
mutate(state = fct_relevel(state, "florida", "texas", "puerto_rico")) %>%
ggplot(aes(date, percent, fill = state)) +
guides(fill = FALSE) +
geom_area(position = "dodge") +
geom_vline(data = TVlines, aes(xintercept=as.numeric(date[c(1,2,3,4)])), linetype=4) +
geom_text(mapping = aes(x = date,
y = 4,
label = RefTV,
hjust = "center",
vjust = 0),
data = TVlines) +
scale_fill_manual(values = c("#ff007b","#ff6e00","#00d9ff"))+
labs(title = "National cable news networks",
x = NULL,
y = "Share of sentences",
caption = "Includes Bloomberg, CNBC, CNN, Fox Business, Fox News and MSNBC.") +
theme_minimal() +
geom_text(data=d, mapping=aes(x=date, y=percent, label=name))
TVplot
d <- data.frame(state = c("texas", "florida", "puerto_rico"),
date=as.Date(c("2017-08-28","2017-09-10","2017-09-28")),
percent=c(1,1,0.75),
name = c("Texas", "Florida", "Puerto Rico"),
stringsAsFactors = FALSE)
TVplot <- tv_states_longer %>%
mutate(state = fct_relevel(state, "florida", "texas", "puerto_rico")) %>%
ggplot(aes(date, percent, fill = state)) +
guides(fill = FALSE) +
geom_area(position = "dodge") +
geom_vline(data = TVlines, aes(xintercept=as.numeric(date[c(1,2,3,4)])), linetype=4) +
geom_text(mapping = aes(x = date,
y = 4,
label = RefTV,
hjust = "center",
vjust = 0),
data = TVlines) +
scale_fill_manual(values = c("#ff007b","#ff6e00","#00d9ff"))+
labs(title = "National cable news networks",
x = NULL,
y = "Share of sentences",
caption = "Includes Bloomberg, CNBC, CNN, Fox Business, Fox News and MSNBC.") +
theme_minimal() +
geom_text(data=d, mapping=aes(x=date, y=percent, label=name))
TVplot
d <- data.frame(state = c("texas", "florida", "puerto_rico"),
date=as.Date(c("2017-08-28","2017-09-10","2017-09-28")),
percent=c(1,1.5,0.5),
name = c("Texas", "Florida", "Puerto Rico"),
stringsAsFactors = FALSE)
TVplot <- tv_states_longer %>%
mutate(state = fct_relevel(state, "florida", "texas", "puerto_rico")) %>%
ggplot(aes(date, percent, fill = state)) +
guides(fill = FALSE) +
geom_area(position = "dodge") +
geom_vline(data = TVlines, aes(xintercept=as.numeric(date[c(1,2,3,4)])), linetype=4) +
geom_text(mapping = aes(x = date,
y = 4,
label = RefTV,
hjust = "center",
vjust = 0),
data = TVlines) +
scale_fill_manual(values = c("#ff007b","#ff6e00","#00d9ff"))+
labs(title = "National cable news networks",
x = NULL,
y = "Share of sentences",
caption = "Includes Bloomberg, CNBC, CNN, Fox Business, Fox News and MSNBC.") +
theme_minimal() +
geom_text(data=d, mapping=aes(x=date, y=percent, label=name))
TVplot
d <- data.frame(state = c("texas", "florida", "puerto_rico"),
date=as.Date(c("2017-08-28","2017-09-10","2017-10-01")),
percent=c(1,1.5,0.40),
name = c("Texas", "Florida", "Puerto Rico"),
stringsAsFactors = FALSE)
TVplot <- tv_states_longer %>%
mutate(state = fct_relevel(state, "florida", "texas", "puerto_rico")) %>%
ggplot(aes(date, percent, fill = state)) +
guides(fill = FALSE) +
geom_area(position = "dodge") +
geom_vline(data = TVlines, aes(xintercept=as.numeric(date[c(1,2,3,4)])), linetype=4) +
geom_text(mapping = aes(x = date,
y = 4,
label = RefTV,
hjust = "center",
vjust = 0),
data = TVlines) +
scale_fill_manual(values = c("#ff007b","#ff6e00","#00d9ff"))+
labs(title = "National cable news networks",
x = NULL,
y = "Share of sentences",
caption = "Includes Bloomberg, CNBC, CNN, Fox Business, Fox News and MSNBC.") +
theme_minimal() +
geom_text(data=d, mapping=aes(x=date, y=percent, label=name))
TVplot
comic_characters <- comic_characters
N <- 23272
#pie chart of appearance count by first appearnce date
comic_characters_gender <- comic_characters %>%
count(gender_type = sex) %>%
mutate(gender_ratio = n/N)#devide each sex count value by total
comic_characters_gender$gender_type <- gsub(" Characters", "", comic_characters_gender$gender_type)
comic_plot_1 <- comic_characters_gender %>%
ggplot(aes("", gender_ratio, fill = gender_type)) +
geom_bar(stat = "identity", width = 5) +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Ratio of Gender Types of Comic Book Characters",
x = "Gender Ratio",
y = NULL,
caption = "Includes DC & Marvel Characters from 1938 to 2013") +
#scale_color_discrete(name = "Gender Types")
comic_plot_1
#Bar plots for type of gender ratio by alignment
comic_plot_2 <- comic_characters %>%
count(gender_type = sex, align) %>%
mutate(gender_ratio = n/N) %>%
#tabyl(gender_type, align) %>% #returns dataframe with counts with sex as row and align as column,
ggplot(aes(gender_ratio, align, fill = gender_type)) +
geom_col() +
facet_wrap(~gender_type) +
theme_minimal()
comic_plot_2
comic_plot_3 <- comic_characters_gender %>%
ggplot(aes(gender_type, gender_ratio, fill = gender_type)) +
geom_bar(stat="identity")
comic_plot_3
comic_plot_1 <- comic_characters_gender %>%
ggplot(aes("", gender_ratio, fill = gender_type))
comic_plot_1
comic_plot_1 <- comic_characters_gender %>%
ggplot(aes("", gender_ratio, fill = gender_type)) +
geom_bar(stat = "identity", width = 5)
comic_plot_1
comic_plot_1 <- comic_characters_gender %>%
ggplot(aes("", gender_ratio, fill = gender_type)) +
geom_bar(stat = "identity", width = 5) +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Ratio of Gender Types of Comic Book Characters",
x = "Gender Ratio",
y = NULL,
caption = "Includes DC & Marvel Characters from 1938 to 2013")
comic_plot_1
comic_plot_1 <- comic_characters_gender %>%
ggplot(aes("", gender_ratio, fill = gender_type)) +
geom_bar(stat = "identity", width = 5) +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Ratio of Gender Types of Comic Book Characters",
x = "Gender Ratio",
y = NULL,
caption = "Includes DC & Marvel Characters from 1938 to 2013") +
scale_color_discrete(name = "Gender Types")
comic_plot_1
#visualizing tv_states data
tv_states_longer <- tv_states %>%
pivot_longer(cols = florida:puerto_rico,
names_to = "state",
values_to = "percent")
TVlines<- data.frame(state = c("florida", "texas", "puerto_rico","florida"),
date = as.Date(c("2017-08-25", "2017-09-10", "2017-09-20", "2017-10-01")),
RefTV = c("Harvey landfall", "Irma landfall", "Maria landfall", "Las Vegas shooting"),
stringsAsFactors = FALSE)
d <- data.frame(state = c("texas", "florida", "puerto_rico"),
date=as.Date(c("2017-08-28","2017-09-10","2017-10-01")),
percent=c(1,1.5,0.40),
name = c("Texas", "Florida", "Puerto Rico"),
stringsAsFactors = FALSE)
TVplot <- tv_states_longer %>%
mutate(state = fct_relevel(state, "florida", "texas", "puerto_rico")) %>%
ggplot(aes(date, percent, fill = state)) +
guides(fill = FALSE) +
geom_area(position = "dodge") +
geom_vline(data = TVlines, aes(xintercept=as.numeric(date[c(1,2,3,4)])), linetype=4) +
geom_text(mapping = aes(x = date,
y = 4,
label = RefTV,
hjust = "center",
vjust = 0),
data = TVlines) +
scale_fill_manual(values = c("#ff007b","#ff6e00","#00d9ff"))+
labs(title = "National cable news networks",
x = NULL,
y = "Share of sentences",
caption = "Includes Bloomberg, CNBC, CNN, Fox Business, Fox News and MSNBC.") +
theme_minimal() +
geom_text(data=d, mapping=aes(x=date, y=percent, label=name))
TVplot
comic_plot_1
comic_plot_1
comic_plot_1
comic_plot_2
comic_plot_3
library(here)
library(lubridate)
library(tidyverse)
library(janitor)
library(rio)
library(ggplot2)
library(purrr)
assess<-import(here::here("data","anonymisedData","assessments.csv")) %>%
clean_names() %>%
as_tibble()
#contains id_assessment which needs to be joined with the assessment name found in
#the assessment dataset
stud_assess<-import(here::here("data","anonymisedData","studentAssessment.csv"))%>%
clean_names() %>%
as_tibble()
#main file; join with stud_assess and assess
stud_info<-import(here::here("data","anonymisedData","studentInfo.csv"))%>%
clean_names() %>%
as_tibble()
assess<-import(here::here("data","anonymisedData","assessments.csv")) %>%
clean_names() %>%
as_tibble()
library(here)
library(lubridate)
library(tidyverse)
library(janitor)
library(rio)
library(ggplot2)
library(purrr)
here
here()
here()
assess<-import(here::here("data","anonymisedData","assessments.csv")) %>%
clean_names() %>%
as_tibble()
assess<-import(here("data","anonymisedData","assessments.csv")) %>%
clean_names() %>%
as_tibble()
assess<-import(here("data","anonymisedData","assessments.csv")) %>%
clean_names() %>%
as_tibble()
library(rio)
assess <- import(here("data","anonymisedData","assessments.csv")) %>%
clean_names() %>%
as_tibble()
stud_assess<-import(here::here("data","anonymisedData","studentAssessment.csv"))%>%
clean_names() %>%
as_tibble()
stud_info<-import(here::here("data","anonymisedData","studentInfo.csv"))%>%
clean_names() %>%
as_tibble()
library(here)
here()
library(here)
library(lubridate)
library(tidyverse)
library(janitor)
library(rio)
library(ggplot2)
library(purrr)
library(readr)
assessments <- read_csv("data/anonymisedData/assessments.csv") %>%
clean_names() %>%
as_tibble()
courses <- read_csv("data/anonymisedData/courses.csv") %>%
clean_names() %>%
as_tibble()
studentassessment <- read_csv("data/anonymisedData/studentAssessment.csv") %>%
clean_names() %>%
as_tibble()
studentinfo <- read_csv("data/anonymisedData/studentInfo.csv") %>%
clean_names() %>%
as_tibble()
studentregistration <- read_csv("data/anonymisedData/studentRegistration.csv") %>%
clean_names() %>%
as_tibble()
studentvle <- read_csv("data/anonymisedData/studentVle.csv") %>%
clean_names() %>%
as_tibble()
vle <- read_csv("data/anonymisedData/vle.csv") %>%
clean_names() %>%
as_tibble()
setwd("~/personal/EDLD MS/EDLD 652 DS/EDLD652_lab3/data")
library(tidyverse)
library(here)
library(rio)
library(knitr)
library(janitor)
library(patchwork)
library(ggplot2)
library(forcats)
library(lubridate)
library(tidyverse)
library(here)
library(rio)
library(knitr)
library(janitor)
library(patchwork)
library(ggplot2)
library(forcats)
library(lubridate)
rstats <- import(here("data", "honeyproduction.csv")) %>%
clean_names() %>%
as_tibble()
hprod <- import(here("data", "honeyproduction.csv")) %>%
clean_names() %>%
as_tibble()
View(hprod)
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod))+
scale_fill_viridis_c(option="magma")
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod), color=white)+
coord_fixed()+
scale_fill_viridis_c(option="magma")
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod), color="white")+
coord_fixed()+
scale_fill_viridis_c(option="magma")
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod), color="white")+
#coord_fixed()+
scale_fill_viridis_c(option="magma")
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod), color="white")+
#coord_fixed()+
#scale_fill_viridis_c(option="magma")
scico::scale_fill_scico(palette = "tokyo")
library(colorblindr)
install.packages("colorblindr")
library(colorblindr)
?colorblindr
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod), color="white", alpha = 0.9)+
#coord_fixed()+
scale_fill_viridis_c(option="magma")
devtools::install_github("wilkelab/cowplot")
library(colorblindr)
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod), color="white")+
#coord_fixed()+
scale_fill_viridis_d
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod), color="white")+
#coord_fixed()+
scale_fill_viridis_d()
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod), color="white")+
#coord_fixed()+
scale_fill_viridis_d(option="magma")
ggplot(hprod,aes(year, state))+
geom_tile(aes(fill=totalprod), color="white")+
#coord_fixed()+
scale_fill_viridis_c(option="magma")
plot1 <- hprod %>%
mutate(production=totalprod/1000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
#coord_fixed()+
scale_fill_viridis_c(option="magma")
plot1
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
#coord_fixed()+
scale_fill_viridis_c(option="magma")
plot1
plot2 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(date, prod)) +
geom_line(aes(color = state))
plot2
plot2 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, prod)) +
geom_line(aes(color = state))
plot2
plot2 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, production)) +
geom_line(aes(color = state))
plot2
library(gghighlight)
install.packages("gghighlight")
library(gghighlight)
states <- unique(hprod$state)
label_face <- ifelse(states == "Oregon" | states == "Washington",
"bold",
"plain")
label_face <- ifelse(states == "Oregon" | states == "Washington",
"bold",
"plain")
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
gghighlight(max(Reaction) > 400)
scale_fill_viridis_c(option="magma")+
theme(axis.text.y = element_text(color = label_color,
face = label_face))
label_color <- ifelse(states == "Oregon" | states == "Washington",
"#C55644",
"gray30")
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
gghighlight(max(Reaction) > 400)
scale_fill_viridis_c(option="magma")+
theme(axis.text.y = element_text(color = label_color,
face = label_face))
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
scale_fill_viridis_c(option="magma")+
theme(axis.text.y = element_text(color = label_color,
face = label_face))
?rayshader
plot1
?element_text
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
scale_fill_viridis_c(option="magma")
plot1 + theme(axis.text.y = element_text(color = label_color,
face = label_face))
library(ggtext)
#library(colorblindr)
?ggtext
install.packages("ggtext")
library(ggtext)
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
scale_fill_viridis_c(option="magma")+
theme(axis.text.y = element_text(color = label_color,
face = label_face))
#library(colorblindr)
?ggtext
library(ggplot2)
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
scale_fill_viridis_c(option="magma")+
theme(axis.text.y = element_text(color = label_color,
face = label_face))
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
scale_fill_viridis_c(option="magma")+
scale_x_continuous(expand = c(0, 0))
plot1
states <- unique(hprod$state)
label_color <- ifelse(states == "CA" |states == "OR" | states == "WA",
"#C55644",
"gray30")
label_face <- ifelse(states == "CA" |states == "OR" | states == "WA",
"bold",
"plain")
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
scale_fill_viridis_c(option="magma")+
scale_x_continuous(expand = c(0, 0))
plot1
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
scale_fill_viridis_c(option="magma")+
scale_x_continuous(expand = c(0, 0)) +
#next 2 lines not working
theme(axis.text.y = element_text(color = label_color,
face = label_face))
plot1 <- hprod %>%
mutate(production=totalprod/10000) %>%
ggplot(aes(year, state))+
geom_tile(aes(fill=production), color="white")+
scale_fill_viridis_c(option="magma")+
scale_x_continuous(expand = c(0, 0)) +
#next 2 lines not working
labs(title = "Honey production over time by state") +
theme(axis.text.y = element_text(color = label_color,
face = label_face))
